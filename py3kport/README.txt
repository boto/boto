This fork of the official boto project is for adding python 3
compatibility. The goal is to have a single code base that by default
runs on python2.x, and with a simple application of 2to3, also runs on
python3.x.  We measure progress by how many of the extensive unit
tests pass.

To contribute, you will need to:

1) Verify you can run and get all the tests to pass on python2.7. 

2) Set up to run tests (which at this point won't all pass) on python 3.3.

3) Refer to the github issues and wiki to organize our team effort.

PRELUDE: INSTALL PYTHON ENVIRONMENTS

You are going to set up virtual environments for both 2.7 and
3.3. Let's start with the former.  (I'm going to assume you will work
in a bash-like shell prompt.)

*** Python 2.7.3

It's important to first verify you can get all tests to run and pass
in Python 2, for three reasons:

 1) This is a baseline: the fastest way to ensure you know how to set
    up your development environment.

 2) You will be able to jump back to this as a reference if you need
    it while troubleshooting.

 3) Most importantly, our changes to the boto source *must* preserve
    all functionality in python 2.  Otherwise upstream will not accept
    merge requests. So you will regularly want to verify the python 2
    tests all still pass.

First, install python 2.7.3, pip, and virtualenv. Search online or ask
for help if needed.

This done, create a virtual environment that is clearly labeled. For
example, suppose you decide to collect all your Python 2 virtual
environments in a folder named $HOME/.pyvenv2 , and you want to
name this one "boto-2.7-dev". Then you could invoke:

virtualenv $HOME/.pyvenv2/boto-2.7-dev

(Make sure you are using the virtualenv associated with Python 2.7.3.)

That done, open a terminal (window) with a command line you will
dedicate to run the Python 2.7 tests.  Go into the boto source
checkout, and then run:

  source $HOME/.pyvenv2/boto-2.7-dev/bin/activate

If you invoke:

  which python pip

... you should see something like:
$HOME/.pyvenv2/boto-2.7-dev/bin/python
$HOME/.pyvenv2/boto-2.7-dev/bin/pip

Also, python -V should print "2.7.3".

Then you can install the boto requirements.  Do this with:

  pip install -r requirements.txt

(where requirements.txt is in the top-level boto source folder).  This
will take some minutes depending on the speed of your network
connection. Once it is done, run the tests:

  python tests/test.py tests/unit

They should all pass.  If not, troubleshoot until they do.

*** Python 3.3.0

The first steps are similar. Install the latest Python 3.3 and pip.
3.3 includes virtualenv, so you don't need to install that separately;
it's an executable named "pyvenv" in the same folder as the Python3.3
executable.

You probably want to have a separate directory for storing Python3
virtual environments.  Let's be forward thinking and call this
$HOME/.pyvenv (but you can tack a "3" on the end and make it .pyvenv3
if you really want to). Then if you want to label the boto venv
something like "boto-3.3-dev", you can say:

 pyvenv $HOME/.pyvenv/boto-3.3-dev

Then go into a NEW shell window, and run:

  source $HOME/.pyvenv/boto-3.3-dev/bin/activate
  pip install -r py3kport/requirements.txt-3.3

Note you are installing a different set of requirements.  If you look
at the diff between requirements.txt and requirements.txt-3.3, you'll
see that the Python 2 version of boto uses many packages that have
been integrated into Python 3's standard library (including, most
recently in 3.3, mock).

To actually run the tests requires a new approach.  We want to apply
to keep the actual source in python 2 form. For Python 3, we want to
copy these sources to a build directory; apply 2to3; and run the tests
on *that*.

I've written a bash script that automates this, which I encourage you
to read and understand.  It's in py3kport/rebuild.sh, and you use it
like this:

  source $HOME/.pyvenv/boto-3.3-dev/bin/activate
  ./py3kport/rebuild.sh

This executes creates the Python 3 sources in ./py3kport/build.  You
only need to source bin/activate once.  Each time you remake the
sources (by re-running rebuild.sh), it will delete the py3kport/build
folder, recreate it, and re-run the tests.

If you want to run specific tests, you can do so selectively via:

  cd py3kport/build
  python tests/test.py tests/unit

Sometimes this will be useful when troubleshooting, because you'll
make changes to the generated python3 code directly, in order to just
understand how to get a test to pass, before modifying the python 2
source. (It becomes a fun puzzle: you need to modify the python2
source so that the python 2 tests pass, AND so that the version
generated by 2to3 will also pass under Python 3.)

(NOTE WELL! Remember the build directory is deleted every time, so be
sure to save private copies of anything you don't want to lose next
time you run rebuild.  Everything matching py3kport/build* is
gitignored, so you can do "cp -a build build.42", etc.)
